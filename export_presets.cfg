[preset.0]

name="Windows Desktop"
platform="Windows Desktop"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path=".bin/Windows/Shigger.exe"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.0.options]

custom_template/debug=""
custom_template/release=""
debug/export_console_wrapper=1
binary_format/embed_pck=true
texture_format/s3tc_bptc=true
texture_format/etc2_astc=false
binary_format/architecture="x86_64"
codesign/enable=false
codesign/timestamp=true
codesign/timestamp_server_url=""
codesign/digest_algorithm=1
codesign/description=""
codesign/custom_options=PackedStringArray()
application/modify_resources=true
application/icon="res://graphics/icon.png"
application/console_wrapper_icon=""
application/icon_interpolation=4
application/file_version=""
application/product_version=""
application/company_name=""
application/product_name=""
application/file_description=""
application/copyright=""
application/trademarks=""
application/export_angle=0
application/export_d3d12=0
application/d3d12_agility_sdk_multiarch=true
ssh_remote_deploy/enabled=false
ssh_remote_deploy/host="user@host_ip"
ssh_remote_deploy/port="22"
ssh_remote_deploy/extra_args_ssh=""
ssh_remote_deploy/extra_args_scp=""
ssh_remote_deploy/run_script="Expand-Archive -LiteralPath '{temp_dir}\\{archive_name}' -DestinationPath '{temp_dir}'
$action = New-ScheduledTaskAction -Execute '{temp_dir}\\{exe_name}' -Argument '{cmd_args}'
$trigger = New-ScheduledTaskTrigger -Once -At 00:00
$settings = New-ScheduledTaskSettingsSet
$task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings
Register-ScheduledTask godot_remote_debug -InputObject $task -Force:$true
Start-ScheduledTask -TaskName godot_remote_debug
while (Get-ScheduledTask -TaskName godot_remote_debug | ? State -eq running) { Start-Sleep -Milliseconds 100 }
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue"
ssh_remote_deploy/cleanup_script="Stop-ScheduledTask -TaskName godot_remote_debug -ErrorAction:SilentlyContinue
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue
Remove-Item -Recurse -Force '{temp_dir}'"
texture_format/bptc=true
texture_format/s3tc=true
texture_format/etc=false
texture_format/etc2=false
dotnet/include_scripts_content=false
dotnet/include_debug_symbols=true
dotnet/embed_build_outputs=false

[preset.1]

name="Web"
platform="Web"
runnable=true
advanced_options=false
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path=".bin/HTML5/index.html"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.1.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=false
variant/thread_support=false
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=true
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script src=\"https://telegram.org/js/games.js\"></script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=false
progressive_web_app/ensure_cross_origin_isolation_headers=true
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)

[preset.2]

name="Yandex"
platform="Web"
runnable=false
advanced_options=false
dedicated_server=false
custom_features="yandex"
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path=".bin/Yandex/index.html"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false
script_export_mode=2

[preset.2.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=false
variant/thread_support=false
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=true
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script src=\"https://yandex.ru/games/sdk/v2\"></script>

<script>

let ysdk;
function InitGame(params, callback) {
    console.log('Yandex SDK start initialisation');
    YaGames.init(params).then(_sdk => {
        ysdk = _sdk;
        console.log('Yandex SDK initialized');

        ysdk.features.LoadingAPI?.ready();
        console.log('Game initialized');
        
        callback();
    }).catch(err => {
        console.log(err);
        console.log('Game initialization error');
    });
}

var lb;
function InitLeaderboard(callback) {
    console.log(\"Leaderboard start initialization\");
    ysdk.getLeaderboards()
      .then(_lb => {
        lb = _lb;
        console.log(\"Leaderboard initialized\");
    
        callback()
    }).catch(err => {
        console.log(err);
        console.log('Leaderboard initialization error');
    });

}

function GetLeaderboardDescription(leaderboardName, callback) {
  lb.getLeaderboardDescription(leaderboardName).then(
      result => {
      console.log(\"Leaderboard description:\");
      console.log(result);
      callback(\"loaded\", result);
    },
      error => {
          console.log('Leaderboard description load error');
          callback(\"error\");
      }
  );
}

function CheckAuth(callback) {
    ysdk.isAvailableMethod('leaderboards.setLeaderboardScore')
      .then(
      result => {
        console.log(result);
        callback(result);
      },
      error => {
          console.log(\"isAvailableMethod setLeaderboardScore error\");
          callback(false);
      }
    );
}

function SaveLeaderboardScore(leaderboardName, score, extraData, callback) {
  console.log('Save leaderboard score', score, \"on\", leaderboardName, \"with\", extraData);
    lb.setLeaderboardScore(leaderboardName, parseInt(score), extraData).then(() => {
        console.log('Leaderboard score saved');
		callback();
    });
}

function LoadLeaderboardPlayerEntry(leaderboardName, callback) {
  lb.getLeaderboardPlayerEntry(leaderboardName)
  .then(res => {
      console.log(\"Loader leaderboard player entry:\", res)
      callback(\"loaded\", res);
    })
  .catch(err => {
    if (err.code === 'LEADERBOARD_PLAYER_NOT_PRESENT') {
      console.log(\"У игрока нет записи в лидерборде\");
    }
    else
      console.log(err);
    callback(\"error\")
  });
}


function LoadLeaderboardEntries(leaderboardName, includeUser, quantityAround, quantityTop, callback) {
  lb.getLeaderboardEntries(leaderboardName, {
    includeUser: includeUser,
    quantityAround: quantityAround,
    quantityTop: quantityTop
  })
  .then(res => {
    console.log(\"Loaded leaderboard entries:\", res);
    callback(\"loaded\", res);
  })
  .catch(err => {
    if (err.code === 'LEADERBOARD_NOT_FOUND') {
      console.log(\"Лидерборд не найден.\");
    } else {
      console.log(err);
    }
    callback(\"error\");
  });
}

let player;
function InitPlayer(full, callback) {
    console.log('Player start initialisation');
    ysdk.getPlayer(full).then(_player => {
        player = _player;
        console.log('Player initialized');
		callback();
     }).catch(err => {
        console.log(err);
        console.log('Player initialization error');
    });
}

function GetPlayerName(callback){
	callback(player.getName());
}

function OpenAuthDialog(callback) {
  if (player.getMode() === 'lite') {
            // Игрок не авторизован.
            ysdk.auth.openAuthDialog().then(() => {
                    // Игрок успешно авторизован
					callback()
                    player.catch(err => {
                        // Ошибка при инициализации объекта Player.
                    });
                }).catch(() => {
                    // Игрок не авторизован.
                });
        }
}

function ShowAd(callback) {
    console.log('Show ad');
    ysdk.adv.showFullscreenAdv({
        callbacks: {
            onClose: function(wasShown) {
                callback('closed')
                console.log('Ad shown');
            },
            onError: function(error) {
                callback('error')
                console.log('Ad error');
            }
        }
    })
}


function ShowAdRewardedVideo(callback) {
    console.log('Show rewarded video');
    ysdk.adv.showRewardedVideo({
        callbacks: {
            onOpen: () => {
                callback(\"opened\")
                console.log('Rewarded video open.');
            },
            onRewarded: () => {
                callback(\"rewarded\")
                console.log('Rewarded!');
            },
            onClose: () => {
                callback(\"closed\")
                console.log('Rewarded video ad closed.');
            }, 
            onError: (e) => {
                callback(\"error\")
                console.log('Error while open rewarded video ad:', e);
            }
        }
    })
}


function SaveData(data, force) {
    console.log('Data save ', data);
    player.setData(data, force).then(() => {
        console.log('Data saved');
    });
}


function SaveStats(data) {
    console.log('Stats save ', data);
    player.setStats(data).then(() => {
            console.log('Stats saved');
    });
}


function LoadData(keys, callback) {
    console.log('Data load ', keys);
    player.getData(keys).then(
        result => {
            console.log('Data loaded');
            callback(\"loaded\", result);
        },
        error => {
            console.log('Data load error');
            callback(\"error\");
        }
    );
}


function LoadStats(keys, callback) {
    console.log('Stats load ', keys);
    player.getStats(keys).then(
        result => {
            console.log('Stats loaded');
            callback(\"loaded\", result);
        },
        error => {
            console.log('Stats load error');
            callback(\"error\");
        }
    );
}

</script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=false
progressive_web_app/ensure_cross_origin_isolation_headers=true
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)
